service: ef-cms
plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-plugin-split-stacks
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing

custom:
  prune:
    automatic: true
    number: 3

  serverless-offline:
    host: 0.0.0.0

  s3:
    host: 0.0.0.0
    port: 9000
    directory: ./storage/s3
    cors: cors-policy.xml

  dynamodb:
    start:
      inMemory: true
      migrate: true
      port: 8000
    seed:
      test:
        sources:
          - table: ${opt:efcmsTableName}
            sources:
              - ./storage/fixtures/seed/misc.json
              - ./storage/fixtures/seed/users.json
              - ./storage/fixtures/seed/101-19.json
              - ./storage/fixtures/seed/102-19.json
              - ./storage/fixtures/seed/103-19.json
              - ./storage/fixtures/seed/104-19.json
              - ./storage/fixtures/seed/105-19.json

  alerts:
    stages:
      - dev
      - stg
      - prod
    dashboards: true
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration

  customDomain:
    domainName: efcms-${self:provider.stage}.${opt:domain}
    basePath: ''
    endpointType: 'regional'
    certificateName: efcms-${self:provider.stage}.${opt:domain}
    certificateRegion: ${opt:region}
    stage: ${self:provider.stage}
    createRoute53Record: false
    enabled: true
  splitStacks:
    perFunction: true
    perType: false
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs8.10
  memorySize: 128
  timeout: 10
  logRetentionInDays: 7
  s3Endpoint: s3.${opt:region}.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint, self:provider.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: ${opt:domain}-documents-${opt:stage}-${opt:region}
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint, self:provider.dynamodbEndpoint}
    MASTER_DYNAMODB_ENDPOINT: ${self:custom.vars.masterDynamodbEndpoint, self:provider.masterDynamodbEndpoint}
    MASTER_REGION: ${self:custom.vars.masterRegion, self:provider.masterRegion}
    STAGE: ${self:custom.stage}
    USER_POOL_ID: ${opt:userPoolId, self:provider.userPoolId}
    NODE_ENV: ${self:custom.vars.nodeEnv}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - arn:aws:lambda:${opt:region}:${opt:accountId}:function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: 'Allow'
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminGetUser
      Resource:
        - arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/${self:provider.environment.USER_POOL_ID}
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:provider.environment.DOCUMENTS_BUCKET_NAME}
            - '/*'
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}
        - arn:aws:dynamodb:${opt:region}:${opt:accountId}:table/${opt:efcmsTableName}/index/*
        - arn:aws:dynamodb:${self:provider.environment.MASTER_REGION}:${opt:accountId}:table/${opt:efcmsTableName}
        - arn:aws:dynamodb:${self:provider.environment.MASTER_REGION}:${opt:accountId}:table/${opt:efcmsTableName}/index/*

package:
  exclude:
    - storage/**
    - coverage/**
    - terraform/**
    - cognito/**

  excludeDevDependencies: true

resources:
  Resources:
    #####
    # This Authorizer is used for validating the JWT token before invoking the lambda
    #####
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/${self:provider.environment.USER_POOL_ID}

    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: '/*'
            MetricsEnabled: true

functions:
  createDocument:
    handler: src/handlers.createDocumentLambda
    events:
      - http:
          path: v1/cases/{caseId}/documents
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getUploadPolicy:
    handler: src/handlers.getUploadPolicyLambda
    events:
      - http:
          path: v1/documents/uploadPolicy
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getDocumentDownloadUrl:
    handler: src/handlers.getDocumentDownloadUrlLambda
    events:
      - http:
          path: v1/documents/{documentId}/documentDownloadUrl
          method: get
          cors: true

  setMessageAsRead:
    handler: src/handlers.setMessageAsReadLambda
    events:
      - http:
          path: v1/messages/{messageId}/read
          method: post
          cors: true

  getDownloadPolicyUrl:
    handler: src/handlers.downloadPolicyUrlLambda
    events:
      - http:
          path: v1/documents/{documentId}/downloadPolicyUrl
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  addCoversheet:
    handler: src/handlers.addCoversheetLambda
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: v1/cases/{caseId}/documents/{documentId}/coversheet
          method: post
          cors: true
          async: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCase:
    handler: src/handlers.updateCaseLambda
    events:
      - http:
          path: v1/cases/{caseId}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  runBatchProcess:
    handler: src/handlers.runBatchProcessLambda
    events:
      - http:
          path: v1/runBatchProcess
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCase:
    handler: src/handlers.createCaseLambda
    events:
      - http:
          path: v1/cases
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCaseFromPaper:
    handler: src/handlers.createCaseFromPaperLambda
    events:
      - http:
          path: v1/cases/paper
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  fileExternalDocument:
    handler: src/handlers.fileExternalDocumentToCaseLambda
    events:
      - http:
          path: v1/cases/{caseId}/external-document
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCasesByUser:
    handler: src/handlers.getCasesByUserLambda
    events:
      - http:
          path: v1/users/{userId}/cases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCasesForRespondent:
    handler: src/handlers.getCasesForRespondentLambda
    events:
      - http:
          path: v1/respondents/{respondentId}/cases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCasesByStatus:
    handler: src/handlers.getCasesByStatusLambda
    events:
      - http:
          path: v1/statuses/{status}/cases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCase:
    handler: src/handlers.getCaseLambda
    events:
      - http:
          path: v1/cases/{caseId}
          method: get
          request:
            parameters:
              paths:
                caseId: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  sendToIRS:
    handler: src/handlers.sendPetitionToIRSHoldingQueueLambda
    events:
      - http:
          path: v1/cases/{caseId}/sendToIRSHoldingQueue
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  recallFromIRS:
    handler: src/handlers.recallPetitionFromIRSHoldingQueueLambda
    events:
      - http:
          path: v1/cases/{caseId}/recallFromIRSHoldingQueue
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  assignWorkItems:
    handler: src/handlers.assignWorkItemsLambda
    events:
      - http:
          path: v1/workitems
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getWorkItem:
    handler: src/handlers.getWorkItemLambda
    events:
      - http:
          path: v1/workitems/{workItemId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  forwardWorkItem:
    handler: src/handlers.forwardWorkItemLambda
    events:
      - http:
          path: v1/workitems/{workItemId}/assignee
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  completeWorkItem:
    handler: src/handlers.completeWorkItemLambda
    events:
      - http:
          path: v1/workitems/{workItemId}/complete
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createWorkItem:
    handler: src/handlers.createWorkItemLambda
    events:
      - http:
          path: v1/cases/{caseId}/documents/{documentId}/workitems
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getSentWorkItemsForSection:
    handler: src/handlers.getSentWorkItemsForSectionLambda
    events:
      - http:
          path: v1/sections/{section}/outbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getWorkItemsBySection:
    handler: src/handlers.getWorkItemsBySectionLambda
    events:
      - http:
          path: v1/sections/{section}/inbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getSentWorkItemsForUser:
    handler: src/handlers.getSentWorkItemsForUserLambda
    events:
      - http:
          path: v1/users/{userId}/outbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getWorkItemsForUser:
    handler: src/handlers.getWorkItemsForUserLambda
    events:
      - http:
          path: v1/users/{userId}/inbox
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInternalUsers:
    handler: src/handlers.getInternalUsersLambda
    events:
      - http:
          path: v1/users/internal
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getUsersInSection:
    handler: src/handlers.getUsersInSectionLambda
    events:
      - http:
          path: v1/sections/{section}/users
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getNotifications:
    handler: src/handlers.getNotificationsLambda
    events:
      - http:
          path: v1/notifications
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createUser:
    handler: src/handlers.createUserLambda
    events:
      - http:
          path: v1/users
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  swagger:
    handler: src/handlers.swaggerLambda
    events:
      - http:
          path: v1/swagger
          method: get
          cors: true

  swaggerJson:
    handler: src/handlers.swaggerJsonLambda
    events:
      - http:
          path: v1/swagger.json
          method: get
          cors: true
